{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/convertArrayToPathName.ts","../src/superstruct.ts","../src/joi.ts","../src/yup.ts"],"sourcesContent":["export default (paths: (string | number)[]): string =>\n  paths\n    .reduce(\n      (previous, path: string | number, index): string =>\n        `${previous}${\n          typeof path === 'string'\n            ? `${index > 0 ? '.' : ''}${path}`\n            : `[${path}]`\n        }`,\n      '',\n    )\n    .toString();\n","import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Superstruct from 'superstruct';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Superstruct.StructError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.failures)\n    ? error.failures.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type || '',\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type || '']: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const superstructResolver = <TFieldValues extends Record<string, any>>(\n  schema: Superstruct.Struct,\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: schema(values),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Joi from '@hapi/joi';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Joi.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.details)\n    ? error.details.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type,\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type]: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const joiResolver = <TFieldValues extends Record<string, any>>(\n  schema: Joi.Schema,\n  options: Joi.AsyncValidationOptions = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: await schema.validateAsync(values, {\n        ...options,\n      }),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","import { Resolver, transformToNestObject } from 'react-hook-form';\nimport Yup from 'yup';\n\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.inner) && error.inner.length\n    ? error.inner.reduce(\n        (previous: Record<string, any>, { path, message, type }) => {\n          const previousTypes = (previous[path] && previous[path].types) || {};\n          return {\n            ...previous,\n            ...(path\n              ? {\n                  [path]: {\n                    ...(previous[path] || {\n                      message,\n                      type,\n                    }),\n                    ...(validateAllFieldCriteria\n                      ? {\n                          types: {\n                            ...previousTypes,\n                            [type]: previousTypes[type]\n                              ? [...[].concat(previousTypes[type]), message]\n                              : message,\n                          },\n                        }\n                      : {}),\n                  },\n                }\n              : {}),\n          };\n        },\n        {},\n      )\n    : {\n        [error.path]: { message: error.message, type: error.type },\n      };\n\nexport const yupResolver = <TFieldValues extends Record<string, any>>(\n  schema: Yup.ObjectSchema | Yup.Lazy,\n  options: Omit<Yup.ValidateOptions, 'context'> = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  context,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    if (\n      (options as Yup.ValidateOptions).context &&\n      process.env.NODE_ENV === 'development'\n    ) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n      );\n    }\n    return {\n      values: (await schema.validate(values, {\n        ...options,\n        context,\n      })) as any,\n      errors: {},\n    };\n  } catch (e) {\n    const parsedErrors = parseErrorSchema(e, validateAllFieldCriteria);\n    return {\n      values: {},\n      errors: validateAllFieldCriteria\n        ? parsedErrors\n        : transformToNestObject(parsedErrors),\n    };\n  }\n};\n"],"names":["paths","reduce","previous","path","index","toString","parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","failures","message","type","currentPath","convertArrayToPathName","[object Object]","appendErrors","types","details","schema","options","abortEarly","async","values","_","validateAsync","errors","e","transformToNestObject","context","validate","parsedErrors","inner","length","previousTypes","concat"],"mappings":"qGAAA,MAAgBA,GACdA,EACGC,OACC,CAACC,EAAUC,EAAuBC,IAChC,GAAGF,IACe,iBAATC,EACH,GAAGC,EAAQ,EAAI,IAAM,KAAKD,IAC1B,IAAIA,OAEZ,IAEDE,WCPL,MAAMC,EAAmB,CACvBC,EACAC,IAEAC,MAAMC,QAAQH,EAAMI,UAChBJ,EAAMI,SAASV,OACb,CAACC,GAAiCC,KAAAA,EAAMS,QAAAA,EAAU,GAAIC,KAAAA,MACpD,MAAMC,EAAcC,EAAuBZ,GAE3C,sCACKD,GACCC,EACAD,EAASY,IAAgBN,EACvB,CACEQ,CAACF,GAAcG,eACbH,EACAN,EACAN,EACAW,GAAQ,GACRD,IAGJ,CACEI,CAACF,GAAcZ,EAASY,mBACtBF,QAAAA,EACAC,KAAAA,GACIL,EACA,CACEU,MAAO,CAAEF,CAACH,GAAQ,IAAKD,IAAW,IAEpC,KAGV,KAGR,IAEF,GCtCAN,EAAmB,CACvBC,EACAC,IAEAC,MAAMC,QAAQH,EAAMY,SAChBZ,EAAMY,QAAQlB,OACZ,CAACC,GAAiCC,KAAAA,EAAMS,QAAAA,EAAU,GAAIC,KAAAA,MACpD,MAAMC,EAAcC,EAAuBZ,GAE3C,sCACKD,GACCC,EACAD,EAASY,IAAgBN,EACvB,CACEQ,CAACF,GAAcG,eACbH,EACAN,EACAN,EACAW,EACAD,IAGJ,CACEI,CAACF,GAAcZ,EAASY,mBACtBF,QAAAA,EACAC,KAAAA,GACIL,EACA,CACEU,MAAO,CAAEF,CAACH,GAAOD,IAAW,IAE9B,KAGV,KAGR,IAEF,uBAEqB,CACzBQ,EACAC,EAAsC,CACpCC,YAAY,KAEaC,MAC3BC,EACAC,EACAjB,GAA2B,KAE3B,IACE,MAAO,CACLgB,aAAcJ,EAAOM,cAAcF,mBAC9BH,IAELM,OAAQ,IAEV,MAAOC,GACP,MAAO,CACLJ,OAAQ,GACRG,OAAQE,wBACNvB,EAAiBsB,EAAGpB,mCDpB1BY,GAC2BG,MAC3BC,EACAC,EACAjB,GAA2B,KAE3B,IACE,MAAO,CACLgB,OAAQJ,EAAOI,GACfG,OAAQ,IAEV,MAAOC,GACP,MAAO,CACLJ,OAAQ,GACRG,OAAQE,wBACNvB,EAAiBsB,EAAGpB,2BEnBD,CACzBY,EACAC,EAAgD,CAC9CC,YAAY,KAEaC,MAC3BC,EACAM,EACAtB,GAA2B,KAE3B,IAUE,OARGa,EAAgCS,QAQ5B,CACLN,aAAeJ,EAAOW,SAASP,iCAC1BH,IACHS,QAAAA,KAEFH,OAAQ,IAEV,MAAOC,GACP,MAAMI,EAlEe,EACvBzB,EACAC,IAEAC,MAAMC,QAAQH,EAAM0B,QAAU1B,EAAM0B,MAAMC,OACtC3B,EAAM0B,MAAMhC,OACV,CAACC,GAAiCC,KAAAA,EAAMS,QAAAA,EAASC,KAAAA,MAC/C,MAAMsB,EAAiBjC,EAASC,IAASD,EAASC,GAAMe,OAAU,GAClE,sCACKhB,GACCC,EACA,CACEa,CAACb,kCACKD,EAASC,IAAS,CACpBS,QAAAA,EACAC,KAAAA,IAEEL,EACA,CACEU,qCACKiB,IACHnB,CAACH,GAAOsB,EAActB,GAClB,IAAI,GAAGuB,OAAOD,EAActB,IAAQD,GACpCA,KAGR,KAGR,KAGR,IAEF,CACEI,CAACT,EAAMJ,MAAO,CAAES,QAASL,EAAMK,QAASC,KAAMN,EAAMM,OA+BnCP,CAAiBsB,EAAGpB,GACzC,MAAO,CACLgB,OAAQ,GACRG,OAAQnB,EACJwB,EACAH,wBAAsBG"}