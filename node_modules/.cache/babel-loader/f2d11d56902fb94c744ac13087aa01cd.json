{"ast":null,"code":"import _toConsumableArray from\"/mnt/c/react/react-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import produce from\"immer\";import{createPromiseAction}from'@adobe/redux-saga-promise';import createReqTypes from\"util/createReqTypes\";import{createAction}from'redux-actions';export var TODO_LIST_LOAD=createReqTypes('TODO_LIST_LOAD');export var TODO_LIST_UNLOAD='TODO_LIST_UNLOAD';export var ADD_TODO=createReqTypes('ADD_TODO');export var REMOVE_TODO=createReqTypes('REMOVE_TODO');export var CHECK_TODO=createReqTypes('CHECK_TODO');/* list 로드용 API 호출 함수, createPromiseAction으로 request 호출을 진행? */export var fetch=createPromiseAction(TODO_LIST_LOAD.type,function(){return{};});/* redux 내 리스트 값들 UNLOAD 시키기 위한 함수 */export var reset=function reset(){return{type:TODO_LIST_UNLOAD};};/* 할 일 추가 API 호출 함수, createPromiseAction으로 request 호출을 진행? */export var addtodo=createPromiseAction(ADD_TODO.type,function(_ref){var text=_ref.text,color=_ref.color;return{text:text,color:color};});/* 할 일 삭제 API 호출 함수, createPromiseAction으로 request 호출을 진행? */export var removetodo=createPromiseAction(REMOVE_TODO.type,function(_ref2){var id=_ref2.id;return{id:id};});/* 할 일 체크 API 호출 함수, createPromiseAction으로 request 호출을 진행? */export var checktodo=createPromiseAction(CHECK_TODO.type,function(_ref3){var id=_ref3.id,checked=_ref3.checked;return{id:id,checked:checked};});/* 최초 상태 선언 */var initialState={loading:false,todos:[]};/* action 처리 함수 부분. 각 타입 별 상태 확인 */export default function todos(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;return produce(state,function(draft){switch(action.type){case TODO_LIST_LOAD.request:draft.loading=true;return;case TODO_LIST_LOAD.success:draft.loading=false;draft.todos=action.payload.data;return;case TODO_LIST_LOAD.failure:draft.loading=false;draft.todos=[];return;case TODO_LIST_UNLOAD:draft.loading=false;draft.todos=[];return;case ADD_TODO.success:draft.todos=[action.payload.data].concat(_toConsumableArray(draft.todos));return;case REMOVE_TODO.success:{var id=action.payload.data.id;draft.todos=draft.todos.filter(function(v){return v.id!=id;});return;}case CHECK_TODO.success:{var _id=action.payload.data.id;var todo=draft.todos.find(function(todo){return todo.id===_id;});todo.checked=action.payload.data.checked;return;}default:return state;}});}","map":{"version":3,"sources":["/mnt/c/react/react-admin/src/store/modules/todo.js"],"names":["produce","createPromiseAction","createReqTypes","createAction","TODO_LIST_LOAD","TODO_LIST_UNLOAD","ADD_TODO","REMOVE_TODO","CHECK_TODO","fetch","type","reset","addtodo","text","color","removetodo","id","checktodo","checked","initialState","loading","todos","state","action","draft","request","success","payload","data","failure","filter","v","todo","find"],"mappings":"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","sourcesContent":["import produce from \"immer\"\r\nimport { createPromiseAction } from '@adobe/redux-saga-promise'\r\nimport createReqTypes from \"util/createReqTypes\"\r\n\r\nimport {createAction} from 'redux-actions'\r\n\r\nexport const TODO_LIST_LOAD = createReqTypes('TODO_LIST_LOAD')\r\nexport const TODO_LIST_UNLOAD = 'TODO_LIST_UNLOAD'\r\nexport const ADD_TODO = createReqTypes('ADD_TODO')\r\nexport const REMOVE_TODO = createReqTypes('REMOVE_TODO')\r\nexport const CHECK_TODO = createReqTypes('CHECK_TODO')\r\n\r\n/* list 로드용 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const fetch = createPromiseAction(TODO_LIST_LOAD.type, () => ({}))\r\n\r\n/* redux 내 리스트 값들 UNLOAD 시키기 위한 함수 */\r\nexport const reset = () => ({ type: TODO_LIST_UNLOAD })\r\n\r\n/* 할 일 추가 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const addtodo = createPromiseAction(ADD_TODO.type, ({text, color}) => ({text, color}) )\r\n\r\n/* 할 일 삭제 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const removetodo = createPromiseAction(REMOVE_TODO.type, ({id}) => ({id}) )\r\n\r\n/* 할 일 체크 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const checktodo = createPromiseAction(CHECK_TODO.type, ({id, checked}) => ({id, checked}) )\r\n\r\n/* 최초 상태 선언 */\r\nconst initialState = {\r\n    loading: false,\r\n    todos: []\r\n};\r\n\r\n/* action 처리 함수 부분. 각 타입 별 상태 확인 */\r\nexport default function todos(state = initialState, action) {\r\n    return produce(state, draft => {\r\n        switch (action.type) {\r\n            case TODO_LIST_LOAD.request:\r\n                draft.loading = true\r\n                return\r\n\r\n            case TODO_LIST_LOAD.success:\r\n                draft.loading = false\r\n                draft.todos = action.payload.data\r\n                return\r\n\r\n            case TODO_LIST_LOAD.failure:\r\n                draft.loading = false\r\n                draft.todos = []\r\n                return\r\n\r\n            case TODO_LIST_UNLOAD:\r\n                draft.loading = false\r\n                draft.todos = []\r\n                return\r\n\r\n            case ADD_TODO.success:\r\n                draft.todos = [action.payload.data,...draft.todos];\r\n                return\r\n\r\n            case REMOVE_TODO.success: {\r\n                const id = action.payload.data.id;\r\n                draft.todos = draft.todos.filter((v) => v.id != id);\r\n                return\r\n            }\r\n\r\n            case CHECK_TODO.success: {\r\n                const id = action.payload.data.id;\r\n                const todo = draft.todos.find(todo => todo.id === id);\r\n                todo.checked = action.payload.data.checked;\r\n                return\r\n            }\r\n            default:\r\n                return state\r\n        }\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}