{"ast":null,"code":"import produce from \"immer\";\nimport { createPromiseAction } from '@adobe/redux-saga-promise';\nimport createReqTypes from \"../../util/createReqTypes\";\nimport { createAction } from 'redux-actions';\nexport const TODO_LIST_LOAD = createReqTypes('TODO_LIST_LOAD');\nexport const TODO_LIST_UNLOAD = 'TODO_LIST_UNLOAD';\nexport const ADD_TODO = createReqTypes('ADD_TODO');\nexport const REMOVE_TODO = createReqTypes('REMOVE_TODO');\nexport const CHECK_TODO = createReqTypes('CHECK_TODO');\n/* list 로드용 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\n\nexport const fetch = createPromiseAction(TODO_LIST_LOAD.type, () => ({}));\n/* redux 내 리스트 값들 UNLOAD 시키기 위한 함수 */\n\nexport const reset = () => ({\n  type: TODO_LIST_UNLOAD\n});\n/* 할 일 추가 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\n\nexport const addtodo = createPromiseAction(ADD_TODO.type, ({\n  text,\n  color\n}) => ({\n  text,\n  color\n}));\n/* 할 일 삭제 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\n\nexport const removetodo = createPromiseAction(REMOVE_TODO.type, ({\n  id\n}) => ({\n  id\n}));\n/* 할 일 체크 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\n\nexport const checktodo = createPromiseAction(CHECK_TODO.type, ({\n  id,\n  checked\n}) => ({\n  id,\n  checked\n}));\n/* 최초 상태 선언 */\n\nconst initialState = {\n  loading: false,\n  todos: []\n};\n/* action 처리 함수 부분. 각 타입 별 상태 확인 */\n\nexport default function todos(state = initialState, action) {\n  return produce(state, draft => {\n    switch (action.type) {\n      case TODO_LIST_LOAD.request:\n        draft.loading = true;\n        return;\n\n      case TODO_LIST_LOAD.success:\n        draft.loading = false;\n        draft.todos = action.payload.data;\n        return;\n\n      case TODO_LIST_LOAD.failure:\n        draft.loading = false;\n        draft.todos = [];\n        return;\n\n      case TODO_LIST_UNLOAD:\n        draft.loading = false;\n        draft.todos = [];\n        return;\n\n      case ADD_TODO.success:\n        draft.todos = [action.payload.data, ...draft.todos];\n        return;\n\n      case REMOVE_TODO.success:\n        {\n          const id = action.payload.data.id;\n          draft.todos = draft.todos.filter(v => v.id != id);\n          return;\n        }\n\n      case CHECK_TODO.success:\n        {\n          const id = action.payload.data.id;\n          const todo = draft.todos.find(todo => todo.id === id);\n          todo.checked = action.payload.data.checked;\n          return;\n        }\n\n      default:\n        return state;\n    }\n  });\n}","map":{"version":3,"sources":["/mnt/c/react/react-admin/src/store/modules/todo.js"],"names":["produce","createPromiseAction","createReqTypes","createAction","TODO_LIST_LOAD","TODO_LIST_UNLOAD","ADD_TODO","REMOVE_TODO","CHECK_TODO","fetch","type","reset","addtodo","text","color","removetodo","id","checktodo","checked","initialState","loading","todos","state","action","draft","request","success","payload","data","failure","filter","v","todo","find"],"mappings":"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","sourcesContent":["import produce from \"immer\"\r\nimport { createPromiseAction } from '@adobe/redux-saga-promise'\r\nimport createReqTypes from \"../../util/createReqTypes\"\r\n\r\nimport {createAction} from 'redux-actions'\r\n\r\nexport const TODO_LIST_LOAD = createReqTypes('TODO_LIST_LOAD')\r\nexport const TODO_LIST_UNLOAD = 'TODO_LIST_UNLOAD'\r\nexport const ADD_TODO = createReqTypes('ADD_TODO')\r\nexport const REMOVE_TODO = createReqTypes('REMOVE_TODO')\r\nexport const CHECK_TODO = createReqTypes('CHECK_TODO')\r\n\r\n/* list 로드용 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const fetch = createPromiseAction(TODO_LIST_LOAD.type, () => ({}))\r\n\r\n/* redux 내 리스트 값들 UNLOAD 시키기 위한 함수 */\r\nexport const reset = () => ({ type: TODO_LIST_UNLOAD })\r\n\r\n/* 할 일 추가 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const addtodo = createPromiseAction(ADD_TODO.type, ({text, color}) => ({text, color}) )\r\n\r\n/* 할 일 삭제 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const removetodo = createPromiseAction(REMOVE_TODO.type, ({id}) => ({id}) )\r\n\r\n/* 할 일 체크 API 호출 함수, createPromiseAction으로 request 호출을 진행? */\r\nexport const checktodo = createPromiseAction(CHECK_TODO.type, ({id, checked}) => ({id, checked}) )\r\n\r\n/* 최초 상태 선언 */\r\nconst initialState = {\r\n    loading: false,\r\n    todos: []\r\n};\r\n\r\n/* action 처리 함수 부분. 각 타입 별 상태 확인 */\r\nexport default function todos(state = initialState, action) {\r\n    return produce(state, draft => {\r\n        switch (action.type) {\r\n            case TODO_LIST_LOAD.request:\r\n                draft.loading = true\r\n                return\r\n\r\n            case TODO_LIST_LOAD.success:\r\n                draft.loading = false\r\n                draft.todos = action.payload.data\r\n                return\r\n\r\n            case TODO_LIST_LOAD.failure:\r\n                draft.loading = false\r\n                draft.todos = []\r\n                return\r\n\r\n            case TODO_LIST_UNLOAD:\r\n                draft.loading = false\r\n                draft.todos = []\r\n                return\r\n\r\n            case ADD_TODO.success:\r\n                draft.todos = [action.payload.data,...draft.todos];\r\n                return\r\n\r\n            case REMOVE_TODO.success: {\r\n                const id = action.payload.data.id;\r\n                draft.todos = draft.todos.filter((v) => v.id != id);\r\n                return\r\n            }\r\n\r\n            case CHECK_TODO.success: {\r\n                const id = action.payload.data.id;\r\n                const todo = draft.todos.find(todo => todo.id === id);\r\n                todo.checked = action.payload.data.checked;\r\n                return\r\n            }\r\n            default:\r\n                return state\r\n        }\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}