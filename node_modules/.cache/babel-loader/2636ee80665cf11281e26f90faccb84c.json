{"ast":null,"code":"/**\n * @author Kuitos\n * @homepage https://github.com/kuitos/\n * @since 2017-10-11\n */\nimport * as tslib_1 from \"tslib\";\nimport LRUCache from 'lru-cache';\nimport buildSortedURL from './utils/buildSortedURL';\nexport default function throttleAdapterEnhancer(adapter, options) {\n  var _this = this;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.threshold,\n      threshold = _a === void 0 ? 1000 : _a,\n      _b = options.cache,\n      cache = _b === void 0 ? new LRUCache({\n    max: 10\n  }) : _b;\n\n  var recordCacheWithRequest = function (index, config) {\n    var responsePromise = function () {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var response, reason_1;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , adapter(config)];\n\n            case 1:\n              response = _a.sent();\n              cache.set(index, {\n                timestamp: Date.now(),\n                value: Promise.resolve(response)\n              });\n              return [2\n              /*return*/\n              , response];\n\n            case 2:\n              reason_1 = _a.sent();\n              cache.del(index);\n              throw reason_1;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }();\n\n    cache.set(index, {\n      timestamp: Date.now(),\n      value: responsePromise\n    });\n    return responsePromise;\n  };\n\n  return function (config) {\n    var url = config.url,\n        method = config.method,\n        params = config.params,\n        paramsSerializer = config.paramsSerializer;\n    var index = buildSortedURL(url, params, paramsSerializer);\n    var now = Date.now();\n    var cachedRecord = cache.get(index) || {\n      timestamp: now\n    };\n\n    if (method === 'get') {\n      if (now - cachedRecord.timestamp <= threshold) {\n        var responsePromise = cachedRecord.value;\n\n        if (responsePromise) {\n          /* istanbul ignore next */\n          if (process.env.LOGGER_LEVEL === 'info') {\n            // eslint-disable-next-line no-console\n            console.info(\"[axios-extensions] request cached by throttle adapter --> url: \" + index);\n          }\n\n          return responsePromise;\n        }\n      }\n\n      return recordCacheWithRequest(index, config);\n    }\n\n    return adapter(config);\n  };\n}","map":{"version":3,"sources":["../src/throttleAdapterEnhancer.ts"],"names":[],"mappings":"AAAA;;;;;;AAOA,OAAO,QAAP,MAAqB,WAArB;AAEA,OAAO,cAAP,MAA2B,wBAA3B;AAYA,eAAc,SAAA,uBAAA,CAAkC,OAAlC,EAAyD,OAAzD,EAA8E;AAA5F,MAAA,KAAA,GAAA,IAAA;;AAAuE,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAqB;;AAEnF,MAAA,EAAA,GAAA,OAAA,CAAA,SAAA;AAAA,MAAA,SAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,EAAA;AAAA,MAAkB,EAAA,GAAA,OAAA,CAAA,KAAlB;AAAA,MAAkB,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,QAAA,CAAA;AAAA,IAAA,GAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAlB;;AAER,MAAM,sBAAsB,GAAG,UAAC,KAAD,EAAgB,MAAhB,EAA0C;AAExE,QAAM,eAAe,GAAI,YAAA;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;AAIN,qBAAA,CAAA;AAAA;AAAA,gBAAM,OAAO,CAAC,MAAD,CAAb,CAAA;;;AAAX,cAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AAEN,cAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB;AAChB,gBAAA,SAAS,EAAE,IAAI,CAAC,GAAL,EADK;AAEhB,gBAAA,KAAK,EAAE,OAAO,CAAC,OAAR,CAAgB,QAAhB;AAFS,eAAjB;AAKA,qBAAA,CAAA;AAAA;AAAA,gBAAO,QAAP,CAAA;;;;AAEA,cAAA,KAAK,CAAC,GAAN,CAAU,KAAV;AACA,oBAAM,QAAN;;;;;;;;OAduB,CAAA;AAiBxB,KAjBuB,EAAxB;;AAmBA,IAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB;AAChB,MAAA,SAAS,EAAE,IAAI,CAAC,GAAL,EADK;AAEhB,MAAA,KAAK,EAAE;AAFS,KAAjB;AAKA,WAAO,eAAP;AACA,GA3BD;;AA6BA,SAAO,UAAA,MAAA,EAAM;AAEJ,QAAA,GAAA,GAAA,MAAA,CAAA,GAAA;AAAA,QAAK,MAAA,GAAA,MAAA,CAAA,MAAL;AAAA,QAAa,MAAA,GAAA,MAAA,CAAA,MAAb;AAAA,QAAqB,gBAAA,GAAA,MAAA,CAAA,gBAArB;AACR,QAAM,KAAK,GAAG,cAAc,CAAC,GAAD,EAAM,MAAN,EAAc,gBAAd,CAA5B;AAEA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,KAAoB;AAAE,MAAA,SAAS,EAAE;AAAb,KAAzC;;AAEA,QAAI,MAAM,KAAK,KAAf,EAAsB;AAErB,UAAI,GAAG,GAAG,YAAY,CAAC,SAAnB,IAAgC,SAApC,EAA+C;AAE9C,YAAM,eAAe,GAAG,YAAY,CAAC,KAArC;;AACA,YAAI,eAAJ,EAAqB;AAEpB;AACA,cAAI,OAAO,CAAC,GAAR,CAAY,YAAZ,KAA6B,MAAjC,EAAyC;AACxC;AACA,YAAA,OAAO,CAAC,IAAR,CAAa,oEAAkE,KAA/E;AACA;;AAED,iBAAO,eAAP;AACA;AACD;;AAED,aAAO,sBAAsB,CAAC,KAAD,EAAQ,MAAR,CAA7B;AACA;;AAED,WAAO,OAAO,CAAC,MAAD,CAAd;AACA,GA7BD;AA8BA","sourceRoot":"","sourcesContent":["/**\n * @author Kuitos\n * @homepage https://github.com/kuitos/\n * @since 2017-10-11\n */\nimport * as tslib_1 from \"tslib\";\nimport LRUCache from 'lru-cache';\nimport buildSortedURL from './utils/buildSortedURL';\nexport default function throttleAdapterEnhancer(adapter, options) {\n    var _this = this;\n    if (options === void 0) { options = {}; }\n    var _a = options.threshold, threshold = _a === void 0 ? 1000 : _a, _b = options.cache, cache = _b === void 0 ? new LRUCache({ max: 10 }) : _b;\n    var recordCacheWithRequest = function (index, config) {\n        var responsePromise = (function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var response, reason_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, adapter(config)];\n                    case 1:\n                        response = _a.sent();\n                        cache.set(index, {\n                            timestamp: Date.now(),\n                            value: Promise.resolve(response),\n                        });\n                        return [2 /*return*/, response];\n                    case 2:\n                        reason_1 = _a.sent();\n                        cache.del(index);\n                        throw reason_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); })();\n        cache.set(index, {\n            timestamp: Date.now(),\n            value: responsePromise,\n        });\n        return responsePromise;\n    };\n    return function (config) {\n        var url = config.url, method = config.method, params = config.params, paramsSerializer = config.paramsSerializer;\n        var index = buildSortedURL(url, params, paramsSerializer);\n        var now = Date.now();\n        var cachedRecord = cache.get(index) || { timestamp: now };\n        if (method === 'get') {\n            if (now - cachedRecord.timestamp <= threshold) {\n                var responsePromise = cachedRecord.value;\n                if (responsePromise) {\n                    /* istanbul ignore next */\n                    if (process.env.LOGGER_LEVEL === 'info') {\n                        // eslint-disable-next-line no-console\n                        console.info(\"[axios-extensions] request cached by throttle adapter --> url: \" + index);\n                    }\n                    return responsePromise;\n                }\n            }\n            return recordCacheWithRequest(index, config);\n        }\n        return adapter(config);\n    };\n}\n//# sourceMappingURL=throttleAdapterEnhancer.js.map"]},"metadata":{},"sourceType":"module"}