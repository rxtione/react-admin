{"ast":null,"code":"import _slicedToArray from\"/mnt/c/react/react-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useCallback}from'react';import{useSelector,useDispatch}from'react-redux';import Page from'./style';import*as todoListActions from'../../store/modules/todo';import TodoInput from'../../component/TodoInput';import Palette from'../../component/Palette';import TodoList from'../../component/TodoList';import LeftMenu from'../../component/LeftMenu';import{addtodo,removetodo,checktodo}from'../../store/modules/todo';/* 할 일 컴포넌트 */var Todo=function Todo(){/* 인풋 상태 저장용 state 생성 */var _useState=useState(''),_useState2=_slicedToArray(_useState,2),todoInput=_useState2[0],setTodoInput=_useState2[1];/* 색상 상태 저장용 state 생성 */var _useState3=useState('red'),_useState4=_slicedToArray(_useState3,2),todoColor=_useState4[0],setTodoColor=_useState4[1];/* api에서 loading과 todos 값 받아옴 */var _useSelector=useSelector(function(state){return state.todos;}),loading=_useSelector.loading,todos=_useSelector.todos;/* 메세지 전달 */var dispatch=useDispatch();/* 리스트를 받아오는 fetch 선언. useCallback을 이용한 재사용. modules의 fetch 실행 */var fetch=useCallback(function(){dispatch(todoListActions.fetch({})).catch(console.log);},[dispatch]);/* 최초 실행 시 목록 받아오도록 fetch() 실행, 리스트를 나갈 때 reset을 호출하여 내용 삭제 */useEffect(function(){fetch();return function(){dispatch(todoListActions.reset());};},[dispatch,fetch]);/* 색상 선택시 발생하는 콜백 */var onSelect=useCallback(function(color){setTodoColor(color);},[todoColor]);/* 추가 버튼을 누르면 해야 할 일 목록이 추가 */var onAddClick=useCallback(function(){//api 호출을 위해 module에서 addtodo 호출\ndispatch(todoListActions.addtodo({text:todoInput,color:todoColor}));setTodoInput('');},[dispatch,todoInput,todoColor]);/* 인풋 상태 저장 */var onTodoInputChange=useCallback(function(e){setTodoInput(e.target.value);},[todoInput]);/* keypress 이벤트에서 엔터 키 값 입력 시 onAddClick 호출 */var onTodoInputKeyPress=useCallback(function(e){if(e.key==='Enter'){onAddClick();}},[onAddClick]);/* 할 일 클릭 시 체크를 반대로 한 후 API로 업데이트 호출 */var onToggleItem=useCallback(function(id,checked){checked=checked==='true'?'false':'true';dispatch(todoListActions.checktodo({id:id,checked:checked}));},[dispatch]);/* 아이템 삭제 */var onRemoveItem=useCallback(function(id){console.log('onRemoveItem - '+id);dispatch(todoListActions.removetodo({id:id}));},[dispatch]);return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"main\",{className:\"todo-list-template\"},/*#__PURE__*/React.createElement(\"div\",{className:\"title\"},\"\\uC624\\uB298 \\uD560 \\uC77C\"),/*#__PURE__*/React.createElement(\"section\",{className:\"palette-wrapper\"},/*#__PURE__*/React.createElement(Palette,{todoColor:todoColor,onSelect:onSelect})),/*#__PURE__*/React.createElement(\"section\",{className:\"form-wrapper\"},/*#__PURE__*/React.createElement(TodoInput,{todoInput:todoInput,onAddClick:onAddClick,onTodoInputChange:onTodoInputChange,onTodoInputKeyPress:onTodoInputKeyPress})),/*#__PURE__*/React.createElement(\"section\",{className:\"todos-wrapper\"},/*#__PURE__*/React.createElement(TodoList,{todos:todos,onToggleItem:onToggleItem,onRemoveItem:onRemoveItem}))));};export default React.memo(Todo);","map":{"version":3,"sources":["/mnt/c/react/react-admin/src/pages/Todo/index.js"],"names":["React","useState","useEffect","useCallback","useSelector","useDispatch","Page","todoListActions","TodoInput","Palette","TodoList","LeftMenu","addtodo","removetodo","checktodo","Todo","todoInput","setTodoInput","todoColor","setTodoColor","state","todos","loading","dispatch","fetch","catch","console","log","reset","onSelect","color","onAddClick","text","onTodoInputChange","e","target","value","onTodoInputKeyPress","key","onToggleItem","id","checked","onRemoveItem","memo"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Page from './style';\r\nimport * as todoListActions from '../../store/modules/todo'\r\nimport TodoInput from '../../component/TodoInput';\r\nimport Palette from '../../component/Palette';\r\nimport TodoList from '../../component/TodoList';\r\nimport LeftMenu from '../../component/LeftMenu';\r\nimport { addtodo, removetodo, checktodo} from '../../store/modules/todo'\r\n\r\n/* 할 일 컴포넌트 */\r\nconst Todo = () => {\r\n    /* 인풋 상태 저장용 state 생성 */\r\n    const [todoInput, setTodoInput] = useState('');\r\n    /* 색상 상태 저장용 state 생성 */\r\n    const [todoColor, setTodoColor] = useState('red');\r\n\r\n    /* api에서 loading과 todos 값 받아옴 */\r\n    const { loading, todos } = useSelector(state => state.todos)\r\n\r\n    /* 메세지 전달 */\r\n    const dispatch = useDispatch();\r\n\r\n    /* 리스트를 받아오는 fetch 선언. useCallback을 이용한 재사용. modules의 fetch 실행 */\r\n    const fetch = useCallback(() => {\r\n        dispatch(\r\n            todoListActions.fetch({})\r\n        ).catch(console.log)\r\n    }, [dispatch]);\r\n\r\n    /* 최초 실행 시 목록 받아오도록 fetch() 실행, 리스트를 나갈 때 reset을 호출하여 내용 삭제 */\r\n    useEffect(() => {\r\n        fetch()\r\n\r\n        return () => {\r\n            dispatch(todoListActions.reset())\r\n        }\r\n    }, [dispatch, fetch])\r\n\r\n    /* 색상 선택시 발생하는 콜백 */\r\n    const onSelect = useCallback((color) => {\r\n        setTodoColor(color);\r\n    }, [todoColor]);\r\n\r\n    /* 추가 버튼을 누르면 해야 할 일 목록이 추가 */\r\n    const onAddClick = useCallback(() => {\r\n        //api 호출을 위해 module에서 addtodo 호출\r\n        dispatch(todoListActions.addtodo({text: todoInput, color: todoColor}));\r\n        setTodoInput('');\r\n    }, [dispatch, todoInput, todoColor])\r\n\r\n    /* 인풋 상태 저장 */\r\n    const onTodoInputChange = useCallback((e) => {\r\n        setTodoInput(e.target.value);\r\n    }, [todoInput])\r\n\r\n    /* keypress 이벤트에서 엔터 키 값 입력 시 onAddClick 호출 */\r\n    const onTodoInputKeyPress = useCallback((e) => {\r\n        if ( e.key === 'Enter' ) {\r\n            onAddClick();\r\n        }\r\n    }, [onAddClick])\r\n\r\n    /* 할 일 클릭 시 체크를 반대로 한 후 API로 업데이트 호출 */\r\n    const onToggleItem = useCallback((id, checked) => {\r\n        checked = (checked === 'true')? 'false':'true';\r\n        dispatch(todoListActions.checktodo({id,checked}));\r\n    }, [dispatch])\r\n\r\n    /* 아이템 삭제 */\r\n    const onRemoveItem = useCallback((id) => {\r\n        console.log('onRemoveItem - ' + id);\r\n        dispatch(todoListActions.removetodo({id}));\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <main className=\"todo-list-template\">\r\n                <div className=\"title\">오늘 할 일</div>\r\n                <section className=\"palette-wrapper\">\r\n                    <Palette todoColor={todoColor} onSelect={onSelect}/>\r\n                </section>\r\n                <section className=\"form-wrapper\">\r\n                    <TodoInput todoInput={todoInput} onAddClick={onAddClick} onTodoInputChange={onTodoInputChange} onTodoInputKeyPress={onTodoInputKeyPress}/>\r\n                </section>\r\n                <section className=\"todos-wrapper\">\r\n                    <TodoList todos={todos} onToggleItem={onToggleItem} onRemoveItem={onRemoveItem}/>\r\n                </section>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Todo)"]},"metadata":{},"sourceType":"module"}