{"ast":null,"code":"var _jsxFileName = \"/mnt/c/react/react-admin/src/pages/Todo/index.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Page from './style';\nimport * as todoListActions from '../../store/modules/todo';\nimport TodoInput from '../../component/TodoInput';\nimport Palette from '../../component/Palette';\nimport TodoList from '../../component/TodoList';\nimport LeftMenu from '../../component/LeftMenu';\nimport { addtodo, removetodo, checktodo } from '../../store/modules/todo';\n/* 할 일 컴포넌트 */\n\nconst Todo = () => {\n  /* 인풋 상태 저장용 state 생성 */\n  const [todoInput, setTodoInput] = useState('');\n  /* 색상 상태 저장용 state 생성 */\n\n  const [todoColor, setTodoColor] = useState('red');\n  /* api에서 loading과 todos 값 받아옴 */\n\n  const {\n    loading,\n    todos\n  } = useSelector(state => state.todos);\n  /* 메세지 전달 */\n\n  const dispatch = useDispatch();\n  /* 리스트를 받아오는 fetch 선언. useCallback을 이용한 재사용. modules의 fetch 실행 */\n\n  const fetch = useCallback(() => {\n    dispatch(todoListActions.fetch({})).catch(console.log);\n  }, [dispatch]);\n  /* 최초 실행 시 목록 받아오도록 fetch() 실행, 리스트를 나갈 때 reset을 호출하여 내용 삭제 */\n\n  useEffect(() => {\n    fetch();\n    return () => {\n      dispatch(todoListActions.reset());\n    };\n  }, [dispatch, fetch]);\n  /* 색상 선택시 발생하는 콜백 */\n\n  const onSelect = useCallback(color => {\n    setTodoColor(color);\n  }, [todoColor]);\n  /* 추가 버튼을 누르면 해야 할 일 목록이 추가 */\n\n  const onAddClick = useCallback(() => {\n    //api 호출을 위해 module에서 addtodo 호출\n    dispatch(todoListActions.addtodo({\n      text: todoInput,\n      color: todoColor\n    }));\n    setTodoInput('');\n  }, [dispatch, todoInput, todoColor]);\n  /* 인풋 상태 저장 */\n\n  const onTodoInputChange = useCallback(e => {\n    setTodoInput(e.target.value);\n  }, [todoInput]);\n  /* keypress 이벤트에서 엔터 키 값 입력 시 onAddClick 호출 */\n\n  const onTodoInputKeyPress = useCallback(e => {\n    if (e.key === 'Enter') {\n      onAddClick();\n    }\n  }, [onAddClick]);\n  /* 할 일 클릭 시 체크를 반대로 한 후 API로 업데이트 호출 */\n\n  const onToggleItem = useCallback((id, checked) => {\n    checked = checked === 'true' ? 'false' : 'true';\n    dispatch(todoListActions.checktodo({\n      id,\n      checked\n    }));\n  }, [dispatch]);\n  /* 아이템 삭제 */\n\n  const onRemoveItem = useCallback(id => {\n    console.log('onRemoveItem - ' + id);\n    dispatch(todoListActions.removetodo({\n      id\n    }));\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"todo-list-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"\\uC624\\uB298 \\uD560 \\uC77C\"), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"palette-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Palette, {\n    todoColor: todoColor,\n    onSelect: onSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TodoInput, {\n    todoInput: todoInput,\n    onAddClick: onAddClick,\n    onTodoInputChange: onTodoInputChange,\n    onTodoInputKeyPress: onTodoInputKeyPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todos-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TodoList, {\n    todos: todos,\n    onToggleItem: onToggleItem,\n    onRemoveItem: onRemoveItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default React.memo(Todo);","map":{"version":3,"sources":["/mnt/c/react/react-admin/src/pages/Todo/index.js"],"names":["React","useState","useEffect","useCallback","useSelector","useDispatch","Page","todoListActions","TodoInput","Palette","TodoList","LeftMenu","addtodo","removetodo","checktodo","Todo","todoInput","setTodoInput","todoColor","setTodoColor","loading","todos","state","dispatch","fetch","catch","console","log","reset","onSelect","color","onAddClick","text","onTodoInputChange","e","target","value","onTodoInputKeyPress","key","onToggleItem","id","checked","onRemoveItem","memo"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Page from './style';\r\nimport * as todoListActions from '../../store/modules/todo'\r\nimport TodoInput from '../../component/TodoInput';\r\nimport Palette from '../../component/Palette';\r\nimport TodoList from '../../component/TodoList';\r\nimport LeftMenu from '../../component/LeftMenu';\r\nimport { addtodo, removetodo, checktodo} from '../../store/modules/todo'\r\n\r\n/* 할 일 컴포넌트 */\r\nconst Todo = () => {\r\n    /* 인풋 상태 저장용 state 생성 */\r\n    const [todoInput, setTodoInput] = useState('');\r\n    /* 색상 상태 저장용 state 생성 */\r\n    const [todoColor, setTodoColor] = useState('red');\r\n\r\n    /* api에서 loading과 todos 값 받아옴 */\r\n    const { loading, todos } = useSelector(state => state.todos)\r\n\r\n    /* 메세지 전달 */\r\n    const dispatch = useDispatch();\r\n\r\n    /* 리스트를 받아오는 fetch 선언. useCallback을 이용한 재사용. modules의 fetch 실행 */\r\n    const fetch = useCallback(() => {\r\n        dispatch(\r\n            todoListActions.fetch({})\r\n        ).catch(console.log)\r\n    }, [dispatch]);\r\n\r\n    /* 최초 실행 시 목록 받아오도록 fetch() 실행, 리스트를 나갈 때 reset을 호출하여 내용 삭제 */\r\n    useEffect(() => {\r\n        fetch()\r\n\r\n        return () => {\r\n            dispatch(todoListActions.reset())\r\n        }\r\n    }, [dispatch, fetch])\r\n\r\n    /* 색상 선택시 발생하는 콜백 */\r\n    const onSelect = useCallback((color) => {\r\n        setTodoColor(color);\r\n    }, [todoColor]);\r\n\r\n    /* 추가 버튼을 누르면 해야 할 일 목록이 추가 */\r\n    const onAddClick = useCallback(() => {\r\n        //api 호출을 위해 module에서 addtodo 호출\r\n        dispatch(todoListActions.addtodo({text: todoInput, color: todoColor}));\r\n        setTodoInput('');\r\n    }, [dispatch, todoInput, todoColor])\r\n\r\n    /* 인풋 상태 저장 */\r\n    const onTodoInputChange = useCallback((e) => {\r\n        setTodoInput(e.target.value);\r\n    }, [todoInput])\r\n\r\n    /* keypress 이벤트에서 엔터 키 값 입력 시 onAddClick 호출 */\r\n    const onTodoInputKeyPress = useCallback((e) => {\r\n        if ( e.key === 'Enter' ) {\r\n            onAddClick();\r\n        }\r\n    }, [onAddClick])\r\n\r\n    /* 할 일 클릭 시 체크를 반대로 한 후 API로 업데이트 호출 */\r\n    const onToggleItem = useCallback((id, checked) => {\r\n        checked = (checked === 'true')? 'false':'true';\r\n        dispatch(todoListActions.checktodo({id,checked}));\r\n    }, [dispatch])\r\n\r\n    /* 아이템 삭제 */\r\n    const onRemoveItem = useCallback((id) => {\r\n        console.log('onRemoveItem - ' + id);\r\n        dispatch(todoListActions.removetodo({id}));\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <main className=\"todo-list-template\">\r\n                <div className=\"title\">오늘 할 일</div>\r\n                <section className=\"palette-wrapper\">\r\n                    <Palette todoColor={todoColor} onSelect={onSelect}/>\r\n                </section>\r\n                <section className=\"form-wrapper\">\r\n                    <TodoInput todoInput={todoInput} onAddClick={onAddClick} onTodoInputChange={onTodoInputChange} onTodoInputKeyPress={onTodoInputKeyPress}/>\r\n                </section>\r\n                <section className=\"todos-wrapper\">\r\n                    <TodoList todos={todos} onToggleItem={onToggleItem} onRemoveItem={onRemoveItem}/>\r\n                </section>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Todo)"]},"metadata":{},"sourceType":"module"}